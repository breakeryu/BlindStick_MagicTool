                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module t18b20
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _printf
                                     12 	.globl _GPIO_setBitValue
                                     13 	.globl _GPIO_resetBitValue
                                     14 	.globl _GPIO_getBitValue
                                     15 	.globl _sleep
                                     16 	.globl _enableAllInterrupts
                                     17 	.globl _disableAllInterrupts
                                     18 	.globl _PX3
                                     19 	.globl _EX3
                                     20 	.globl _IE3
                                     21 	.globl _IT3
                                     22 	.globl _PX2
                                     23 	.globl _EX2
                                     24 	.globl _IE2
                                     25 	.globl _IT2
                                     26 	.globl _TF2
                                     27 	.globl _EXF2
                                     28 	.globl _RCLK
                                     29 	.globl _TCLK
                                     30 	.globl _EXEN2
                                     31 	.globl _TR2
                                     32 	.globl _T2_CT
                                     33 	.globl _CPRL2
                                     34 	.globl _INT2
                                     35 	.globl _INT3
                                     36 	.globl _P4_3
                                     37 	.globl _P4_2
                                     38 	.globl _P4_1
                                     39 	.globl _P4_0
                                     40 	.globl _T2EX
                                     41 	.globl _T2
                                     42 	.globl _PT2
                                     43 	.globl _ET2
                                     44 	.globl _CY
                                     45 	.globl _AC
                                     46 	.globl _F0
                                     47 	.globl _RS1
                                     48 	.globl _RS0
                                     49 	.globl _OV
                                     50 	.globl _F1
                                     51 	.globl _P
                                     52 	.globl _PS
                                     53 	.globl _PT1
                                     54 	.globl _PX1
                                     55 	.globl _PT0
                                     56 	.globl _PX0
                                     57 	.globl _RD
                                     58 	.globl _WR
                                     59 	.globl _T1
                                     60 	.globl _T0
                                     61 	.globl _INT1
                                     62 	.globl _INT0
                                     63 	.globl _TXD
                                     64 	.globl _RXD
                                     65 	.globl _P3_7
                                     66 	.globl _P3_6
                                     67 	.globl _P3_5
                                     68 	.globl _P3_4
                                     69 	.globl _P3_3
                                     70 	.globl _P3_2
                                     71 	.globl _P3_1
                                     72 	.globl _P3_0
                                     73 	.globl _EA
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _P4
                                    120 	.globl _ISP_CONTR
                                    121 	.globl _ISP_TRIG
                                    122 	.globl _ISP_CMD
                                    123 	.globl _ISP_ADDRL
                                    124 	.globl _ISP_ADDRH
                                    125 	.globl _ISP_DATA
                                    126 	.globl _WDT_CONTR
                                    127 	.globl _TH2
                                    128 	.globl _TL2
                                    129 	.globl _RCAP2H
                                    130 	.globl _RCAP2L
                                    131 	.globl _T2MOD
                                    132 	.globl _T2CON
                                    133 	.globl _XICON
                                    134 	.globl _IPH
                                    135 	.globl _SADDR1
                                    136 	.globl _AUXR1
                                    137 	.globl _AUXR
                                    138 	.globl _B
                                    139 	.globl _ACC
                                    140 	.globl _PSW
                                    141 	.globl _IP
                                    142 	.globl _P3
                                    143 	.globl _IE
                                    144 	.globl _P2
                                    145 	.globl _SBUF
                                    146 	.globl _SCON
                                    147 	.globl _P1
                                    148 	.globl _TH1
                                    149 	.globl _TH0
                                    150 	.globl _TL1
                                    151 	.globl _TL0
                                    152 	.globl _TMOD
                                    153 	.globl _TCON
                                    154 	.globl _PCON
                                    155 	.globl _DPH
                                    156 	.globl _DPL
                                    157 	.globl _SP
                                    158 	.globl _P0
                                    159 	.globl _DelayT_10us
                                    160 	.globl _t18b20Init
                                    161 	.globl _t18b20Write_byte
                                    162 	.globl _t18b20Read_byte
                                    163 	.globl _t18b20Read_temper
                                    164 ;--------------------------------------------------------
                                    165 ; special function registers
                                    166 ;--------------------------------------------------------
                                    167 	.area RSEG    (ABS,DATA)
      000000                        168 	.org 0x0000
                           000080   169 _P0	=	0x0080
                           000081   170 _SP	=	0x0081
                           000082   171 _DPL	=	0x0082
                           000083   172 _DPH	=	0x0083
                           000087   173 _PCON	=	0x0087
                           000088   174 _TCON	=	0x0088
                           000089   175 _TMOD	=	0x0089
                           00008A   176 _TL0	=	0x008a
                           00008B   177 _TL1	=	0x008b
                           00008C   178 _TH0	=	0x008c
                           00008D   179 _TH1	=	0x008d
                           000090   180 _P1	=	0x0090
                           000098   181 _SCON	=	0x0098
                           000099   182 _SBUF	=	0x0099
                           0000A0   183 _P2	=	0x00a0
                           0000A8   184 _IE	=	0x00a8
                           0000B0   185 _P3	=	0x00b0
                           0000B8   186 _IP	=	0x00b8
                           0000D0   187 _PSW	=	0x00d0
                           0000E0   188 _ACC	=	0x00e0
                           0000F0   189 _B	=	0x00f0
                           00008E   190 _AUXR	=	0x008e
                           0000A2   191 _AUXR1	=	0x00a2
                           0000A9   192 _SADDR1	=	0x00a9
                           0000B7   193 _IPH	=	0x00b7
                           0000C0   194 _XICON	=	0x00c0
                           0000C8   195 _T2CON	=	0x00c8
                           0000C9   196 _T2MOD	=	0x00c9
                           0000CA   197 _RCAP2L	=	0x00ca
                           0000CB   198 _RCAP2H	=	0x00cb
                           0000CC   199 _TL2	=	0x00cc
                           0000CD   200 _TH2	=	0x00cd
                           0000E1   201 _WDT_CONTR	=	0x00e1
                           0000E2   202 _ISP_DATA	=	0x00e2
                           0000E3   203 _ISP_ADDRH	=	0x00e3
                           0000E4   204 _ISP_ADDRL	=	0x00e4
                           0000E5   205 _ISP_CMD	=	0x00e5
                           0000E6   206 _ISP_TRIG	=	0x00e6
                           0000E7   207 _ISP_CONTR	=	0x00e7
                           0000E8   208 _P4	=	0x00e8
                                    209 ;--------------------------------------------------------
                                    210 ; special function bits
                                    211 ;--------------------------------------------------------
                                    212 	.area RSEG    (ABS,DATA)
      000000                        213 	.org 0x0000
                           000080   214 _P0_0	=	0x0080
                           000081   215 _P0_1	=	0x0081
                           000082   216 _P0_2	=	0x0082
                           000083   217 _P0_3	=	0x0083
                           000084   218 _P0_4	=	0x0084
                           000085   219 _P0_5	=	0x0085
                           000086   220 _P0_6	=	0x0086
                           000087   221 _P0_7	=	0x0087
                           000088   222 _IT0	=	0x0088
                           000089   223 _IE0	=	0x0089
                           00008A   224 _IT1	=	0x008a
                           00008B   225 _IE1	=	0x008b
                           00008C   226 _TR0	=	0x008c
                           00008D   227 _TF0	=	0x008d
                           00008E   228 _TR1	=	0x008e
                           00008F   229 _TF1	=	0x008f
                           000090   230 _P1_0	=	0x0090
                           000091   231 _P1_1	=	0x0091
                           000092   232 _P1_2	=	0x0092
                           000093   233 _P1_3	=	0x0093
                           000094   234 _P1_4	=	0x0094
                           000095   235 _P1_5	=	0x0095
                           000096   236 _P1_6	=	0x0096
                           000097   237 _P1_7	=	0x0097
                           000098   238 _RI	=	0x0098
                           000099   239 _TI	=	0x0099
                           00009A   240 _RB8	=	0x009a
                           00009B   241 _TB8	=	0x009b
                           00009C   242 _REN	=	0x009c
                           00009D   243 _SM2	=	0x009d
                           00009E   244 _SM1	=	0x009e
                           00009F   245 _SM0	=	0x009f
                           0000A0   246 _P2_0	=	0x00a0
                           0000A1   247 _P2_1	=	0x00a1
                           0000A2   248 _P2_2	=	0x00a2
                           0000A3   249 _P2_3	=	0x00a3
                           0000A4   250 _P2_4	=	0x00a4
                           0000A5   251 _P2_5	=	0x00a5
                           0000A6   252 _P2_6	=	0x00a6
                           0000A7   253 _P2_7	=	0x00a7
                           0000A8   254 _EX0	=	0x00a8
                           0000A9   255 _ET0	=	0x00a9
                           0000AA   256 _EX1	=	0x00aa
                           0000AB   257 _ET1	=	0x00ab
                           0000AC   258 _ES	=	0x00ac
                           0000AF   259 _EA	=	0x00af
                           0000B0   260 _P3_0	=	0x00b0
                           0000B1   261 _P3_1	=	0x00b1
                           0000B2   262 _P3_2	=	0x00b2
                           0000B3   263 _P3_3	=	0x00b3
                           0000B4   264 _P3_4	=	0x00b4
                           0000B5   265 _P3_5	=	0x00b5
                           0000B6   266 _P3_6	=	0x00b6
                           0000B7   267 _P3_7	=	0x00b7
                           0000B0   268 _RXD	=	0x00b0
                           0000B1   269 _TXD	=	0x00b1
                           0000B2   270 _INT0	=	0x00b2
                           0000B3   271 _INT1	=	0x00b3
                           0000B4   272 _T0	=	0x00b4
                           0000B5   273 _T1	=	0x00b5
                           0000B6   274 _WR	=	0x00b6
                           0000B7   275 _RD	=	0x00b7
                           0000B8   276 _PX0	=	0x00b8
                           0000B9   277 _PT0	=	0x00b9
                           0000BA   278 _PX1	=	0x00ba
                           0000BB   279 _PT1	=	0x00bb
                           0000BC   280 _PS	=	0x00bc
                           0000D0   281 _P	=	0x00d0
                           0000D1   282 _F1	=	0x00d1
                           0000D2   283 _OV	=	0x00d2
                           0000D3   284 _RS0	=	0x00d3
                           0000D4   285 _RS1	=	0x00d4
                           0000D5   286 _F0	=	0x00d5
                           0000D6   287 _AC	=	0x00d6
                           0000D7   288 _CY	=	0x00d7
                           0000AD   289 _ET2	=	0x00ad
                           0000BD   290 _PT2	=	0x00bd
                           000090   291 _T2	=	0x0090
                           000091   292 _T2EX	=	0x0091
                           0000E8   293 _P4_0	=	0x00e8
                           0000E9   294 _P4_1	=	0x00e9
                           0000EA   295 _P4_2	=	0x00ea
                           0000EB   296 _P4_3	=	0x00eb
                           0000EA   297 _INT3	=	0x00ea
                           0000EB   298 _INT2	=	0x00eb
                           0000C8   299 _CPRL2	=	0x00c8
                           0000C9   300 _T2_CT	=	0x00c9
                           0000CA   301 _TR2	=	0x00ca
                           0000CB   302 _EXEN2	=	0x00cb
                           0000CC   303 _TCLK	=	0x00cc
                           0000CD   304 _RCLK	=	0x00cd
                           0000CE   305 _EXF2	=	0x00ce
                           0000CF   306 _TF2	=	0x00cf
                           0000C0   307 _IT2	=	0x00c0
                           0000C1   308 _IE2	=	0x00c1
                           0000C2   309 _EX2	=	0x00c2
                           0000C3   310 _PX2	=	0x00c3
                           0000C4   311 _IT3	=	0x00c4
                           0000C5   312 _IE3	=	0x00c5
                           0000C6   313 _EX3	=	0x00c6
                           0000C7   314 _PX3	=	0x00c7
                                    315 ;--------------------------------------------------------
                                    316 ; overlayable register banks
                                    317 ;--------------------------------------------------------
                                    318 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        319 	.ds 8
                                    320 ;--------------------------------------------------------
                                    321 ; internal ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area DSEG    (DATA)
                                    324 ;--------------------------------------------------------
                                    325 ; overlayable items in internal ram 
                                    326 ;--------------------------------------------------------
                                    327 	.area	OSEG    (OVR,DATA)
                                    328 ;--------------------------------------------------------
                                    329 ; indirectly addressable internal ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area ISEG    (DATA)
                                    332 ;--------------------------------------------------------
                                    333 ; absolute internal ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area IABS    (ABS,DATA)
                                    336 	.area IABS    (ABS,DATA)
                                    337 ;--------------------------------------------------------
                                    338 ; bit data
                                    339 ;--------------------------------------------------------
                                    340 	.area BSEG    (BIT)
                                    341 ;--------------------------------------------------------
                                    342 ; paged external ram data
                                    343 ;--------------------------------------------------------
                                    344 	.area PSEG    (PAG,XDATA)
                                    345 ;--------------------------------------------------------
                                    346 ; external ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area XSEG    (XDATA)
                                    349 ;--------------------------------------------------------
                                    350 ; absolute external ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area XABS    (ABS,XDATA)
                                    353 ;--------------------------------------------------------
                                    354 ; external initialized ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area XISEG   (XDATA)
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT0 (CODE)
                                    359 	.area GSINIT1 (CODE)
                                    360 	.area GSINIT2 (CODE)
                                    361 	.area GSINIT3 (CODE)
                                    362 	.area GSINIT4 (CODE)
                                    363 	.area GSINIT5 (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.area GSFINAL (CODE)
                                    366 	.area CSEG    (CODE)
                                    367 ;--------------------------------------------------------
                                    368 ; global & static initialisations
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area GSINIT  (CODE)
                                    372 	.area GSFINAL (CODE)
                                    373 	.area GSINIT  (CODE)
                                    374 ;--------------------------------------------------------
                                    375 ; Home
                                    376 ;--------------------------------------------------------
                                    377 	.area HOME    (CODE)
                                    378 	.area HOME    (CODE)
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'DelayT_10us'
                                    385 ;------------------------------------------------------------
                                    386 ;count                     Allocated to registers 
                                    387 ;------------------------------------------------------------
                                    388 ;	../src/t18b20.c:6: void DelayT_10us(uchar count)
                                    389 ;	-----------------------------------------
                                    390 ;	 function DelayT_10us
                                    391 ;	-----------------------------------------
      000000                        392 _DelayT_10us:
                           000007   393 	ar7 = 0x07
                           000006   394 	ar6 = 0x06
                           000005   395 	ar5 = 0x05
                           000004   396 	ar4 = 0x04
                           000003   397 	ar3 = 0x03
                           000002   398 	ar2 = 0x02
                           000001   399 	ar1 = 0x01
                           000000   400 	ar0 = 0x00
      000000 AF 82            [24]  401 	mov	r7,dpl
                                    402 ;	../src/t18b20.c:8: while(count--)
      000002                        403 00101$:
      000002 8F 06            [24]  404 	mov	ar6,r7
      000004 1F               [12]  405 	dec	r7
      000005 EE               [12]  406 	mov	a,r6
      000006 60 0A            [24]  407 	jz	00104$
                                    408 ;	../src/t18b20.c:10: _nop_();
      000008 00               [12]  409 	NOP	
                                    410 ;	../src/t18b20.c:11: _nop_();
      000009 00               [12]  411 	NOP	
                                    412 ;	../src/t18b20.c:12: _nop_();
      00000A 00               [12]  413 	NOP	
                                    414 ;	../src/t18b20.c:13: _nop_();
      00000B 00               [12]  415 	NOP	
                                    416 ;	../src/t18b20.c:15: _nop_();
      00000C 00               [12]  417 	NOP	
                                    418 ;	../src/t18b20.c:16: _nop_();
      00000D 00               [12]  419 	NOP	
                                    420 ;	../src/t18b20.c:17: _nop_();
      00000E 00               [12]  421 	NOP	
                                    422 ;	../src/t18b20.c:18: _nop_();
      00000F 00               [12]  423 	NOP	
      000010 80 F0            [24]  424 	sjmp	00101$
      000012                        425 00104$:
                                    426 ;	../src/t18b20.c:20: }
      000012 22               [24]  427 	ret
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 't18b20Init'
                                    430 ;------------------------------------------------------------
                                    431 ;	../src/t18b20.c:32: void t18b20Init(void)
                                    432 ;	-----------------------------------------
                                    433 ;	 function t18b20Init
                                    434 ;	-----------------------------------------
      000013                        435 _t18b20Init:
                                    436 ;	../src/t18b20.c:34: disableAllInterrupts();
      000013 12r00r00         [24]  437 	lcall	_disableAllInterrupts
                                    438 ;	../src/t18b20.c:36: tdsDate(0);
      000016 75*00 80         [24]  439 	mov	_GPIO_resetBitValue_PARM_2,#0x80
      000019 75 82 03         [24]  440 	mov	dpl,#0x03
      00001C 12r00r00         [24]  441 	lcall	_GPIO_resetBitValue
                                    442 ;	../src/t18b20.c:37: DelayT_10us(70);
      00001F 75 82 46         [24]  443 	mov	dpl,#0x46
      000022 12r00r00         [24]  444 	lcall	_DelayT_10us
                                    445 ;	../src/t18b20.c:39: tdsDate(1);
      000025 75*00 80         [24]  446 	mov	_GPIO_setBitValue_PARM_2,#0x80
      000028 75 82 03         [24]  447 	mov	dpl,#0x03
      00002B 12r00r00         [24]  448 	lcall	_GPIO_setBitValue
                                    449 ;	../src/t18b20.c:40: DelayT_10us(6);
      00002E 75 82 06         [24]  450 	mov	dpl,#0x06
      000031 12r00r00         [24]  451 	lcall	_DelayT_10us
                                    452 ;	../src/t18b20.c:42: while(!tgetDate);
      000034                        453 00101$:
      000034 75*00 80         [24]  454 	mov	_GPIO_getBitValue_PARM_2,#0x80
      000037 75 82 03         [24]  455 	mov	dpl,#0x03
      00003A 12r00r00         [24]  456 	lcall	_GPIO_getBitValue
      00003D E5 82            [12]  457 	mov	a,dpl
      00003F 60 F3            [24]  458 	jz	00101$
                                    459 ;	../src/t18b20.c:43: DelayT_10us(50);
      000041 75 82 32         [24]  460 	mov	dpl,#0x32
      000044 12r00r00         [24]  461 	lcall	_DelayT_10us
                                    462 ;	../src/t18b20.c:44: printf("Init Done!\r\n");
      000047 74r10            [12]  463 	mov	a,#___str_0
      000049 C0 E0            [24]  464 	push	acc
      00004B 74s00            [12]  465 	mov	a,#(___str_0 >> 8)
      00004D C0 E0            [24]  466 	push	acc
      00004F 74 80            [12]  467 	mov	a,#0x80
      000051 C0 E0            [24]  468 	push	acc
      000053 12r00r00         [24]  469 	lcall	_printf
      000056 15 81            [12]  470 	dec	sp
      000058 15 81            [12]  471 	dec	sp
      00005A 15 81            [12]  472 	dec	sp
                                    473 ;	../src/t18b20.c:45: enableAllInterrupts();
                                    474 ;	../src/t18b20.c:69: }
      00005C 02r00r00         [24]  475 	ljmp	_enableAllInterrupts
                                    476 ;------------------------------------------------------------
                                    477 ;Allocation info for local variables in function 't18b20Write_byte'
                                    478 ;------------------------------------------------------------
                                    479 ;dat                       Allocated to registers r7 
                                    480 ;j                         Allocated to registers r6 
                                    481 ;flag                      Allocated to registers r5 
                                    482 ;------------------------------------------------------------
                                    483 ;	../src/t18b20.c:81: void t18b20Write_byte(uchar dat)  
                                    484 ;	-----------------------------------------
                                    485 ;	 function t18b20Write_byte
                                    486 ;	-----------------------------------------
      00005F                        487 _t18b20Write_byte:
      00005F AF 82            [24]  488 	mov	r7,dpl
                                    489 ;	../src/t18b20.c:102: for(j=1;j<=8;j++)
      000061 7E 01            [12]  490 	mov	r6,#0x01
      000063                        491 00102$:
                                    492 ;	../src/t18b20.c:104: flag = dat&0x01;
      000063 EF               [12]  493 	mov	a,r7
      000064 54 01            [12]  494 	anl	a,#0x01
      000066 FD               [12]  495 	mov	r5,a
                                    496 ;	../src/t18b20.c:105: dat=dat>>1;
      000067 EF               [12]  497 	mov	a,r7
      000068 C3               [12]  498 	clr	c
      000069 13               [12]  499 	rrc	a
      00006A FF               [12]  500 	mov	r7,a
                                    501 ;	../src/t18b20.c:107: tdsDate(0);  //拉低总线并延时2us
      00006B 75*00 80         [24]  502 	mov	_GPIO_resetBitValue_PARM_2,#0x80
      00006E 75 82 03         [24]  503 	mov	dpl,#0x03
      000071 C0 07            [24]  504 	push	ar7
      000073 C0 06            [24]  505 	push	ar6
      000075 C0 05            [24]  506 	push	ar5
      000077 12r00r00         [24]  507 	lcall	_GPIO_resetBitValue
      00007A D0 05            [24]  508 	pop	ar5
      00007C D0 06            [24]  509 	pop	ar6
      00007E D0 07            [24]  510 	pop	ar7
                                    511 ;	../src/t18b20.c:108: _nop_();
      000080 00               [12]  512 	NOP	
                                    513 ;	../src/t18b20.c:109: _nop_();
      000081 00               [12]  514 	NOP	
                                    515 ;	../src/t18b20.c:111: tdsDate(flag);//将要写的位放到总线
      000082 ED               [12]  516 	mov	a,r5
      000083 60 13            [24]  517 	jz	00106$
      000085 75*00 80         [24]  518 	mov	_GPIO_setBitValue_PARM_2,#0x80
      000088 75 82 03         [24]  519 	mov	dpl,#0x03
      00008B C0 07            [24]  520 	push	ar7
      00008D C0 06            [24]  521 	push	ar6
      00008F 12r00r00         [24]  522 	lcall	_GPIO_setBitValue
      000092 D0 06            [24]  523 	pop	ar6
      000094 D0 07            [24]  524 	pop	ar7
      000096 80 11            [24]  525 	sjmp	00107$
      000098                        526 00106$:
      000098 75*00 80         [24]  527 	mov	_GPIO_resetBitValue_PARM_2,#0x80
      00009B 75 82 03         [24]  528 	mov	dpl,#0x03
      00009E C0 07            [24]  529 	push	ar7
      0000A0 C0 06            [24]  530 	push	ar6
      0000A2 12r00r00         [24]  531 	lcall	_GPIO_resetBitValue
      0000A5 D0 06            [24]  532 	pop	ar6
      0000A7 D0 07            [24]  533 	pop	ar7
      0000A9                        534 00107$:
                                    535 ;	../src/t18b20.c:112: DelayT_10us(6);//延时60us
      0000A9 75 82 06         [24]  536 	mov	dpl,#0x06
      0000AC C0 07            [24]  537 	push	ar7
      0000AE C0 06            [24]  538 	push	ar6
      0000B0 12r00r00         [24]  539 	lcall	_DelayT_10us
                                    540 ;	../src/t18b20.c:114: tdsDate(1);//拉高释放总线
      0000B3 75*00 80         [24]  541 	mov	_GPIO_setBitValue_PARM_2,#0x80
      0000B6 75 82 03         [24]  542 	mov	dpl,#0x03
      0000B9 12r00r00         [24]  543 	lcall	_GPIO_setBitValue
      0000BC D0 06            [24]  544 	pop	ar6
      0000BE D0 07            [24]  545 	pop	ar7
                                    546 ;	../src/t18b20.c:102: for(j=1;j<=8;j++)
      0000C0 0E               [12]  547 	inc	r6
      0000C1 EE               [12]  548 	mov	a,r6
      0000C2 24 F7            [12]  549 	add	a,#0xff - 0x08
      0000C4 50 9D            [24]  550 	jnc	00102$
                                    551 ;	../src/t18b20.c:118: }
      0000C6 22               [24]  552 	ret
                                    553 ;------------------------------------------------------------
                                    554 ;Allocation info for local variables in function 't18b20Read_byte'
                                    555 ;------------------------------------------------------------
                                    556 ;dat                       Allocated to registers r7 
                                    557 ;flag                      Allocated to registers r5 
                                    558 ;j                         Allocated to registers r6 
                                    559 ;------------------------------------------------------------
                                    560 ;	../src/t18b20.c:130: uchar t18b20Read_byte(void)    
                                    561 ;	-----------------------------------------
                                    562 ;	 function t18b20Read_byte
                                    563 ;	-----------------------------------------
      0000C7                        564 _t18b20Read_byte:
                                    565 ;	../src/t18b20.c:162: uchar dat = 0,flag,j;
      0000C7 7F 00            [12]  566 	mov	r7,#0x00
                                    567 ;	../src/t18b20.c:163: disableAllInterrupts();
      0000C9 C0 07            [24]  568 	push	ar7
      0000CB 12r00r00         [24]  569 	lcall	_disableAllInterrupts
      0000CE D0 07            [24]  570 	pop	ar7
                                    571 ;	../src/t18b20.c:164: for(j=1;j<=8;j++)
      0000D0 7E 01            [12]  572 	mov	r6,#0x01
      0000D2                        573 00104$:
                                    574 ;	../src/t18b20.c:166: dat >>= 1;	
      0000D2 EF               [12]  575 	mov	a,r7
      0000D3 C3               [12]  576 	clr	c
      0000D4 13               [12]  577 	rrc	a
      0000D5 FF               [12]  578 	mov	r7,a
                                    579 ;	../src/t18b20.c:167: tdsDate(0);  //拉低总线并延时2us
      0000D6 75*00 80         [24]  580 	mov	_GPIO_resetBitValue_PARM_2,#0x80
      0000D9 75 82 03         [24]  581 	mov	dpl,#0x03
      0000DC C0 07            [24]  582 	push	ar7
      0000DE C0 06            [24]  583 	push	ar6
      0000E0 12r00r00         [24]  584 	lcall	_GPIO_resetBitValue
      0000E3 D0 06            [24]  585 	pop	ar6
      0000E5 D0 07            [24]  586 	pop	ar7
                                    587 ;	../src/t18b20.c:168: _nop_();
      0000E7 00               [12]  588 	NOP	
                                    589 ;	../src/t18b20.c:169: _nop_();
      0000E8 00               [12]  590 	NOP	
                                    591 ;	../src/t18b20.c:170: tdsDate(1);  //拉高释放总线并延时2us
      0000E9 75*00 80         [24]  592 	mov	_GPIO_setBitValue_PARM_2,#0x80
      0000EC 75 82 03         [24]  593 	mov	dpl,#0x03
      0000EF C0 07            [24]  594 	push	ar7
      0000F1 C0 06            [24]  595 	push	ar6
      0000F3 12r00r00         [24]  596 	lcall	_GPIO_setBitValue
      0000F6 D0 06            [24]  597 	pop	ar6
      0000F8 D0 07            [24]  598 	pop	ar7
                                    599 ;	../src/t18b20.c:171: _nop_();
      0000FA 00               [12]  600 	NOP	
                                    601 ;	../src/t18b20.c:172: _nop_();
      0000FB 00               [12]  602 	NOP	
                                    603 ;	../src/t18b20.c:174: flag = tgetDate;//采集
      0000FC 75*00 80         [24]  604 	mov	_GPIO_getBitValue_PARM_2,#0x80
      0000FF 75 82 03         [24]  605 	mov	dpl,#0x03
      000102 C0 07            [24]  606 	push	ar7
      000104 C0 06            [24]  607 	push	ar6
      000106 12r00r00         [24]  608 	lcall	_GPIO_getBitValue
      000109 AD 82            [24]  609 	mov	r5,dpl
                                    610 ;	../src/t18b20.c:175: if (tgetDate) dat |= 0x80;        //读取数据
      00010B 75*00 80         [24]  611 	mov	_GPIO_getBitValue_PARM_2,#0x80
      00010E 75 82 03         [24]  612 	mov	dpl,#0x03
      000111 C0 05            [24]  613 	push	ar5
      000113 12r00r00         [24]  614 	lcall	_GPIO_getBitValue
      000116 E5 82            [12]  615 	mov	a,dpl
      000118 D0 05            [24]  616 	pop	ar5
      00011A D0 06            [24]  617 	pop	ar6
      00011C D0 07            [24]  618 	pop	ar7
      00011E 60 03            [24]  619 	jz	00102$
      000120 43 07 80         [24]  620 	orl	ar7,#0x80
      000123                        621 00102$:
                                    622 ;	../src/t18b20.c:176: DelayT_10us(7);//延时60us
      000123 75 82 07         [24]  623 	mov	dpl,#0x07
      000126 C0 07            [24]  624 	push	ar7
      000128 C0 06            [24]  625 	push	ar6
      00012A C0 05            [24]  626 	push	ar5
      00012C 12r00r00         [24]  627 	lcall	_DelayT_10us
                                    628 ;	../src/t18b20.c:177: printf("Write flag= ");
      00012F 74r1D            [12]  629 	mov	a,#___str_1
      000131 C0 E0            [24]  630 	push	acc
      000133 74s00            [12]  631 	mov	a,#(___str_1 >> 8)
      000135 C0 E0            [24]  632 	push	acc
      000137 74 80            [12]  633 	mov	a,#0x80
      000139 C0 E0            [24]  634 	push	acc
      00013B 12r00r00         [24]  635 	lcall	_printf
      00013E 15 81            [12]  636 	dec	sp
      000140 15 81            [12]  637 	dec	sp
      000142 15 81            [12]  638 	dec	sp
                                    639 ;	../src/t18b20.c:178: printf("%u\r\n",flag);
      000144 7C 00            [12]  640 	mov	r4,#0x00
      000146 C0 04            [24]  641 	push	ar4
      000148 74r2A            [12]  642 	mov	a,#___str_2
      00014A C0 E0            [24]  643 	push	acc
      00014C 74s00            [12]  644 	mov	a,#(___str_2 >> 8)
      00014E C0 E0            [24]  645 	push	acc
      000150 74 80            [12]  646 	mov	a,#0x80
      000152 C0 E0            [24]  647 	push	acc
      000154 12r00r00         [24]  648 	lcall	_printf
      000157 E5 81            [12]  649 	mov	a,sp
      000159 24 FB            [12]  650 	add	a,#0xfb
      00015B F5 81            [12]  651 	mov	sp,a
      00015D D0 06            [24]  652 	pop	ar6
      00015F D0 07            [24]  653 	pop	ar7
                                    654 ;	../src/t18b20.c:164: for(j=1;j<=8;j++)
      000161 0E               [12]  655 	inc	r6
      000162 EE               [12]  656 	mov	a,r6
      000163 24 F7            [12]  657 	add	a,#0xff - 0x08
      000165 40 03            [24]  658 	jc	00122$
      000167 02r00rD2         [24]  659 	ljmp	00104$
      00016A                        660 00122$:
                                    661 ;	../src/t18b20.c:182: enableAllInterrupts();
      00016A C0 07            [24]  662 	push	ar7
      00016C 12r00r00         [24]  663 	lcall	_enableAllInterrupts
      00016F D0 07            [24]  664 	pop	ar7
                                    665 ;	../src/t18b20.c:183: return dat;	
      000171 8F 82            [24]  666 	mov	dpl,r7
                                    667 ;	../src/t18b20.c:185: }
      000173 22               [24]  668 	ret
                                    669 ;------------------------------------------------------------
                                    670 ;Allocation info for local variables in function 't18b20Read_temper'
                                    671 ;------------------------------------------------------------
                                    672 ;TL                        Allocated to registers r7 
                                    673 ;TH                        Allocated to registers r6 
                                    674 ;temp                      Allocated to registers 
                                    675 ;------------------------------------------------------------
                                    676 ;	../src/t18b20.c:197: uint t18b20Read_temper(void)
                                    677 ;	-----------------------------------------
                                    678 ;	 function t18b20Read_temper
                                    679 ;	-----------------------------------------
      000174                        680 _t18b20Read_temper:
                                    681 ;	../src/t18b20.c:202: t18b20Init();
      000174 12r00r13         [24]  682 	lcall	_t18b20Init
                                    683 ;	../src/t18b20.c:204: t18b20Write_byte(0xcc);        //跳过ROM操作命令
      000177 75 82 CC         [24]  684 	mov	dpl,#0xcc
      00017A 12r00r5F         [24]  685 	lcall	_t18b20Write_byte
                                    686 ;	../src/t18b20.c:205: t18b20Write_byte(0x44);        //发送启动温度转换命令
      00017D 75 82 44         [24]  687 	mov	dpl,#0x44
      000180 12r00r5F         [24]  688 	lcall	_t18b20Write_byte
                                    689 ;	../src/t18b20.c:207: sleep(20);
      000183 90 00 14         [24]  690 	mov	dptr,#0x0014
      000186 12r00r00         [24]  691 	lcall	_sleep
                                    692 ;	../src/t18b20.c:209: t18b20Init();
      000189 12r00r13         [24]  693 	lcall	_t18b20Init
                                    694 ;	../src/t18b20.c:211: t18b20Write_byte(0xcc);        //跳过ROM操作命令
      00018C 75 82 CC         [24]  695 	mov	dpl,#0xcc
      00018F 12r00r5F         [24]  696 	lcall	_t18b20Write_byte
                                    697 ;	../src/t18b20.c:212: t18b20Write_byte(0xbe);        //发送读温度寄存器命令
      000192 75 82 BE         [24]  698 	mov	dpl,#0xbe
      000195 12r00r5F         [24]  699 	lcall	_t18b20Write_byte
                                    700 ;	../src/t18b20.c:214: TL = t18b20Read_byte();           //先读低八位
      000198 12r00rC7         [24]  701 	lcall	_t18b20Read_byte
      00019B AF 82            [24]  702 	mov	r7,dpl
                                    703 ;	../src/t18b20.c:215: TH = t18b20Read_byte();           //再读高八位
      00019D C0 07            [24]  704 	push	ar7
      00019F 12r00rC7         [24]  705 	lcall	_t18b20Read_byte
      0001A2 AE 82            [24]  706 	mov	r6,dpl
      0001A4 D0 07            [24]  707 	pop	ar7
                                    708 ;	../src/t18b20.c:222: temp = ((uint)TH<<8) + TL;//将温度组合成16变量
      0001A6 8E 05            [24]  709 	mov	ar5,r6
      0001A8 E4               [12]  710 	clr	a
      0001A9 FE               [12]  711 	mov	r6,a
      0001AA FC               [12]  712 	mov	r4,a
      0001AB EF               [12]  713 	mov	a,r7
      0001AC 2E               [12]  714 	add	a,r6
      0001AD F5 82            [12]  715 	mov	dpl,a
      0001AF EC               [12]  716 	mov	a,r4
      0001B0 3D               [12]  717 	addc	a,r5
      0001B1 F5 83            [12]  718 	mov	dph,a
                                    719 ;	../src/t18b20.c:224: return temp;
                                    720 ;	../src/t18b20.c:234: }
      0001B3 22               [24]  721 	ret
                                    722 	.area CSEG    (CODE)
                                    723 	.area CONST   (CODE)
      000000                        724 _hexTable:
      000000 30                     725 	.db #0x30	;  48	'0'
      000001 31                     726 	.db #0x31	;  49	'1'
      000002 32                     727 	.db #0x32	;  50	'2'
      000003 33                     728 	.db #0x33	;  51	'3'
      000004 34                     729 	.db #0x34	;  52	'4'
      000005 35                     730 	.db #0x35	;  53	'5'
      000006 36                     731 	.db #0x36	;  54	'6'
      000007 37                     732 	.db #0x37	;  55	'7'
      000008 38                     733 	.db #0x38	;  56	'8'
      000009 39                     734 	.db #0x39	;  57	'9'
      00000A 41                     735 	.db #0x41	;  65	'A'
      00000B 42                     736 	.db #0x42	;  66	'B'
      00000C 43                     737 	.db #0x43	;  67	'C'
      00000D 44                     738 	.db #0x44	;  68	'D'
      00000E 45                     739 	.db #0x45	;  69	'E'
      00000F 46                     740 	.db #0x46	;  70	'F'
                                    741 	.area CONST   (CODE)
      000010                        742 ___str_0:
      000010 49 6E 69 74 20 44 6F   743 	.ascii "Init Done!"
             6E 65 21
      00001A 0D                     744 	.db 0x0d
      00001B 0A                     745 	.db 0x0a
      00001C 00                     746 	.db 0x00
                                    747 	.area CSEG    (CODE)
                                    748 	.area CONST   (CODE)
      00001D                        749 ___str_1:
      00001D 57 72 69 74 65 20 66   750 	.ascii "Write flag= "
             6C 61 67 3D 20
      000029 00                     751 	.db 0x00
                                    752 	.area CSEG    (CODE)
                                    753 	.area CONST   (CODE)
      00002A                        754 ___str_2:
      00002A 25 75                  755 	.ascii "%u"
      00002C 0D                     756 	.db 0x0d
      00002D 0A                     757 	.db 0x0a
      00002E 00                     758 	.db 0x00
                                    759 	.area CSEG    (CODE)
                                    760 	.area XINIT   (CODE)
                                    761 	.area CABS    (ABS,CODE)
