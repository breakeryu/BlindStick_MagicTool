                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _TIM2_BAUD_cmd
                                     12 	.globl _TIM2_config
                                     13 	.globl _TIM2_cmd
                                     14 	.globl _TIM_config
                                     15 	.globl _TIM_cmd
                                     16 	.globl _PX3
                                     17 	.globl _EX3
                                     18 	.globl _IE3
                                     19 	.globl _IT3
                                     20 	.globl _PX2
                                     21 	.globl _EX2
                                     22 	.globl _IE2
                                     23 	.globl _IT2
                                     24 	.globl _TF2
                                     25 	.globl _EXF2
                                     26 	.globl _RCLK
                                     27 	.globl _TCLK
                                     28 	.globl _EXEN2
                                     29 	.globl _TR2
                                     30 	.globl _T2_CT
                                     31 	.globl _CPRL2
                                     32 	.globl _INT2
                                     33 	.globl _INT3
                                     34 	.globl _P4_3
                                     35 	.globl _P4_2
                                     36 	.globl _P4_1
                                     37 	.globl _P4_0
                                     38 	.globl _T2EX
                                     39 	.globl _T2
                                     40 	.globl _PT2
                                     41 	.globl _ET2
                                     42 	.globl _CY
                                     43 	.globl _AC
                                     44 	.globl _F0
                                     45 	.globl _RS1
                                     46 	.globl _RS0
                                     47 	.globl _OV
                                     48 	.globl _F1
                                     49 	.globl _P
                                     50 	.globl _PS
                                     51 	.globl _PT1
                                     52 	.globl _PX1
                                     53 	.globl _PT0
                                     54 	.globl _PX0
                                     55 	.globl _RD
                                     56 	.globl _WR
                                     57 	.globl _T1
                                     58 	.globl _T0
                                     59 	.globl _INT1
                                     60 	.globl _INT0
                                     61 	.globl _TXD
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _EA
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _P1_7
                                     94 	.globl _P1_6
                                     95 	.globl _P1_5
                                     96 	.globl _P1_4
                                     97 	.globl _P1_3
                                     98 	.globl _P1_2
                                     99 	.globl _P1_1
                                    100 	.globl _P1_0
                                    101 	.globl _TF1
                                    102 	.globl _TR1
                                    103 	.globl _TF0
                                    104 	.globl _TR0
                                    105 	.globl _IE1
                                    106 	.globl _IT1
                                    107 	.globl _IE0
                                    108 	.globl _IT0
                                    109 	.globl _P0_7
                                    110 	.globl _P0_6
                                    111 	.globl _P0_5
                                    112 	.globl _P0_4
                                    113 	.globl _P0_3
                                    114 	.globl _P0_2
                                    115 	.globl _P0_1
                                    116 	.globl _P0_0
                                    117 	.globl _P4
                                    118 	.globl _ISP_CONTR
                                    119 	.globl _ISP_TRIG
                                    120 	.globl _ISP_CMD
                                    121 	.globl _ISP_ADDRL
                                    122 	.globl _ISP_ADDRH
                                    123 	.globl _ISP_DATA
                                    124 	.globl _WDT_CONTR
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _XICON
                                    132 	.globl _IPH
                                    133 	.globl _SADDR1
                                    134 	.globl _AUXR1
                                    135 	.globl _AUXR
                                    136 	.globl _B
                                    137 	.globl _ACC
                                    138 	.globl _PSW
                                    139 	.globl _IP
                                    140 	.globl _P3
                                    141 	.globl _IE
                                    142 	.globl _P2
                                    143 	.globl _SBUF
                                    144 	.globl _SCON
                                    145 	.globl _P1
                                    146 	.globl _TH1
                                    147 	.globl _TH0
                                    148 	.globl _TL1
                                    149 	.globl _TL0
                                    150 	.globl _TMOD
                                    151 	.globl _TCON
                                    152 	.globl _PCON
                                    153 	.globl _DPH
                                    154 	.globl _DPL
                                    155 	.globl _SP
                                    156 	.globl _P0
                                    157 	.globl _UART_getBaudGeneratorInitValue_PARM_2
                                    158 	.globl _UART_cmd_multiBaudrate
                                    159 	.globl _UART_cmd_receive
                                    160 	.globl _UART_config
                                    161 	.globl _UART_getBaudGeneratorInitValue
                                    162 	.globl _UART_getByte
                                    163 	.globl _UART_isReceived
                                    164 	.globl _UART_isTransmitted
                                    165 	.globl _UART_sendByte
                                    166 	.globl _UART_sendHex
                                    167 	.globl _UART_sendString
                                    168 	.globl _UART_setMode
                                    169 	.globl _UART_switchTim
                                    170 	.globl _UART_INT_cmd
                                    171 	.globl _UART_INT_setPriority
                                    172 ;--------------------------------------------------------
                                    173 ; special function registers
                                    174 ;--------------------------------------------------------
                                    175 	.area RSEG    (ABS,DATA)
      000000                        176 	.org 0x0000
                           000080   177 _P0	=	0x0080
                           000081   178 _SP	=	0x0081
                           000082   179 _DPL	=	0x0082
                           000083   180 _DPH	=	0x0083
                           000087   181 _PCON	=	0x0087
                           000088   182 _TCON	=	0x0088
                           000089   183 _TMOD	=	0x0089
                           00008A   184 _TL0	=	0x008a
                           00008B   185 _TL1	=	0x008b
                           00008C   186 _TH0	=	0x008c
                           00008D   187 _TH1	=	0x008d
                           000090   188 _P1	=	0x0090
                           000098   189 _SCON	=	0x0098
                           000099   190 _SBUF	=	0x0099
                           0000A0   191 _P2	=	0x00a0
                           0000A8   192 _IE	=	0x00a8
                           0000B0   193 _P3	=	0x00b0
                           0000B8   194 _IP	=	0x00b8
                           0000D0   195 _PSW	=	0x00d0
                           0000E0   196 _ACC	=	0x00e0
                           0000F0   197 _B	=	0x00f0
                           00008E   198 _AUXR	=	0x008e
                           0000A2   199 _AUXR1	=	0x00a2
                           0000A9   200 _SADDR1	=	0x00a9
                           0000B7   201 _IPH	=	0x00b7
                           0000C0   202 _XICON	=	0x00c0
                           0000C8   203 _T2CON	=	0x00c8
                           0000C9   204 _T2MOD	=	0x00c9
                           0000CA   205 _RCAP2L	=	0x00ca
                           0000CB   206 _RCAP2H	=	0x00cb
                           0000CC   207 _TL2	=	0x00cc
                           0000CD   208 _TH2	=	0x00cd
                           0000E1   209 _WDT_CONTR	=	0x00e1
                           0000E2   210 _ISP_DATA	=	0x00e2
                           0000E3   211 _ISP_ADDRH	=	0x00e3
                           0000E4   212 _ISP_ADDRL	=	0x00e4
                           0000E5   213 _ISP_CMD	=	0x00e5
                           0000E6   214 _ISP_TRIG	=	0x00e6
                           0000E7   215 _ISP_CONTR	=	0x00e7
                           0000E8   216 _P4	=	0x00e8
                                    217 ;--------------------------------------------------------
                                    218 ; special function bits
                                    219 ;--------------------------------------------------------
                                    220 	.area RSEG    (ABS,DATA)
      000000                        221 	.org 0x0000
                           000080   222 _P0_0	=	0x0080
                           000081   223 _P0_1	=	0x0081
                           000082   224 _P0_2	=	0x0082
                           000083   225 _P0_3	=	0x0083
                           000084   226 _P0_4	=	0x0084
                           000085   227 _P0_5	=	0x0085
                           000086   228 _P0_6	=	0x0086
                           000087   229 _P0_7	=	0x0087
                           000088   230 _IT0	=	0x0088
                           000089   231 _IE0	=	0x0089
                           00008A   232 _IT1	=	0x008a
                           00008B   233 _IE1	=	0x008b
                           00008C   234 _TR0	=	0x008c
                           00008D   235 _TF0	=	0x008d
                           00008E   236 _TR1	=	0x008e
                           00008F   237 _TF1	=	0x008f
                           000090   238 _P1_0	=	0x0090
                           000091   239 _P1_1	=	0x0091
                           000092   240 _P1_2	=	0x0092
                           000093   241 _P1_3	=	0x0093
                           000094   242 _P1_4	=	0x0094
                           000095   243 _P1_5	=	0x0095
                           000096   244 _P1_6	=	0x0096
                           000097   245 _P1_7	=	0x0097
                           000098   246 _RI	=	0x0098
                           000099   247 _TI	=	0x0099
                           00009A   248 _RB8	=	0x009a
                           00009B   249 _TB8	=	0x009b
                           00009C   250 _REN	=	0x009c
                           00009D   251 _SM2	=	0x009d
                           00009E   252 _SM1	=	0x009e
                           00009F   253 _SM0	=	0x009f
                           0000A0   254 _P2_0	=	0x00a0
                           0000A1   255 _P2_1	=	0x00a1
                           0000A2   256 _P2_2	=	0x00a2
                           0000A3   257 _P2_3	=	0x00a3
                           0000A4   258 _P2_4	=	0x00a4
                           0000A5   259 _P2_5	=	0x00a5
                           0000A6   260 _P2_6	=	0x00a6
                           0000A7   261 _P2_7	=	0x00a7
                           0000A8   262 _EX0	=	0x00a8
                           0000A9   263 _ET0	=	0x00a9
                           0000AA   264 _EX1	=	0x00aa
                           0000AB   265 _ET1	=	0x00ab
                           0000AC   266 _ES	=	0x00ac
                           0000AF   267 _EA	=	0x00af
                           0000B0   268 _P3_0	=	0x00b0
                           0000B1   269 _P3_1	=	0x00b1
                           0000B2   270 _P3_2	=	0x00b2
                           0000B3   271 _P3_3	=	0x00b3
                           0000B4   272 _P3_4	=	0x00b4
                           0000B5   273 _P3_5	=	0x00b5
                           0000B6   274 _P3_6	=	0x00b6
                           0000B7   275 _P3_7	=	0x00b7
                           0000B0   276 _RXD	=	0x00b0
                           0000B1   277 _TXD	=	0x00b1
                           0000B2   278 _INT0	=	0x00b2
                           0000B3   279 _INT1	=	0x00b3
                           0000B4   280 _T0	=	0x00b4
                           0000B5   281 _T1	=	0x00b5
                           0000B6   282 _WR	=	0x00b6
                           0000B7   283 _RD	=	0x00b7
                           0000B8   284 _PX0	=	0x00b8
                           0000B9   285 _PT0	=	0x00b9
                           0000BA   286 _PX1	=	0x00ba
                           0000BB   287 _PT1	=	0x00bb
                           0000BC   288 _PS	=	0x00bc
                           0000D0   289 _P	=	0x00d0
                           0000D1   290 _F1	=	0x00d1
                           0000D2   291 _OV	=	0x00d2
                           0000D3   292 _RS0	=	0x00d3
                           0000D4   293 _RS1	=	0x00d4
                           0000D5   294 _F0	=	0x00d5
                           0000D6   295 _AC	=	0x00d6
                           0000D7   296 _CY	=	0x00d7
                           0000AD   297 _ET2	=	0x00ad
                           0000BD   298 _PT2	=	0x00bd
                           000090   299 _T2	=	0x0090
                           000091   300 _T2EX	=	0x0091
                           0000E8   301 _P4_0	=	0x00e8
                           0000E9   302 _P4_1	=	0x00e9
                           0000EA   303 _P4_2	=	0x00ea
                           0000EB   304 _P4_3	=	0x00eb
                           0000EA   305 _INT3	=	0x00ea
                           0000EB   306 _INT2	=	0x00eb
                           0000C8   307 _CPRL2	=	0x00c8
                           0000C9   308 _T2_CT	=	0x00c9
                           0000CA   309 _TR2	=	0x00ca
                           0000CB   310 _EXEN2	=	0x00cb
                           0000CC   311 _TCLK	=	0x00cc
                           0000CD   312 _RCLK	=	0x00cd
                           0000CE   313 _EXF2	=	0x00ce
                           0000CF   314 _TF2	=	0x00cf
                           0000C0   315 _IT2	=	0x00c0
                           0000C1   316 _IE2	=	0x00c1
                           0000C2   317 _EX2	=	0x00c2
                           0000C3   318 _PX2	=	0x00c3
                           0000C4   319 _IT3	=	0x00c4
                           0000C5   320 _IE3	=	0x00c5
                           0000C6   321 _EX3	=	0x00c6
                           0000C7   322 _PX3	=	0x00c7
                                    323 ;--------------------------------------------------------
                                    324 ; overlayable register banks
                                    325 ;--------------------------------------------------------
                                    326 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        327 	.ds 8
                                    328 ;--------------------------------------------------------
                                    329 ; internal ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area DSEG    (DATA)
      000000                        332 _UART_config_uc_65536_49:
      000000                        333 	.ds 3
      000003                        334 _UART_config_tc_65536_50:
      000003                        335 	.ds 6
      000009                        336 _UART_config_tc2_65536_50:
      000009                        337 	.ds 8
      000011                        338 _UART_getBaudGeneratorInitValue_PARM_2:
      000011                        339 	.ds 1
      000012                        340 _UART_getBaudGeneratorInitValue_sloc0_1_0:
      000012                        341 	.ds 4
                                    342 ;--------------------------------------------------------
                                    343 ; overlayable items in internal ram 
                                    344 ;--------------------------------------------------------
                                    345 	.area	OSEG    (OVR,DATA)
                                    346 	.area	OSEG    (OVR,DATA)
                                    347 	.area	OSEG    (OVR,DATA)
                                    348 	.area	OSEG    (OVR,DATA)
                                    349 	.area	OSEG    (OVR,DATA)
                                    350 	.area	OSEG    (OVR,DATA)
                                    351 	.area	OSEG    (OVR,DATA)
                                    352 	.area	OSEG    (OVR,DATA)
                                    353 ;--------------------------------------------------------
                                    354 ; indirectly addressable internal ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area ISEG    (DATA)
                                    357 ;--------------------------------------------------------
                                    358 ; absolute internal ram data
                                    359 ;--------------------------------------------------------
                                    360 	.area IABS    (ABS,DATA)
                                    361 	.area IABS    (ABS,DATA)
                                    362 ;--------------------------------------------------------
                                    363 ; bit data
                                    364 ;--------------------------------------------------------
                                    365 	.area BSEG    (BIT)
                                    366 ;--------------------------------------------------------
                                    367 ; paged external ram data
                                    368 ;--------------------------------------------------------
                                    369 	.area PSEG    (PAG,XDATA)
                                    370 ;--------------------------------------------------------
                                    371 ; external ram data
                                    372 ;--------------------------------------------------------
                                    373 	.area XSEG    (XDATA)
                                    374 ;--------------------------------------------------------
                                    375 ; absolute external ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area XABS    (ABS,XDATA)
                                    378 ;--------------------------------------------------------
                                    379 ; external initialized ram data
                                    380 ;--------------------------------------------------------
                                    381 	.area XISEG   (XDATA)
                                    382 	.area HOME    (CODE)
                                    383 	.area GSINIT0 (CODE)
                                    384 	.area GSINIT1 (CODE)
                                    385 	.area GSINIT2 (CODE)
                                    386 	.area GSINIT3 (CODE)
                                    387 	.area GSINIT4 (CODE)
                                    388 	.area GSINIT5 (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 	.area GSFINAL (CODE)
                                    391 	.area CSEG    (CODE)
                                    392 ;--------------------------------------------------------
                                    393 ; global & static initialisations
                                    394 ;--------------------------------------------------------
                                    395 	.area HOME    (CODE)
                                    396 	.area GSINIT  (CODE)
                                    397 	.area GSFINAL (CODE)
                                    398 	.area GSINIT  (CODE)
                                    399 ;--------------------------------------------------------
                                    400 ; Home
                                    401 ;--------------------------------------------------------
                                    402 	.area HOME    (CODE)
                                    403 	.area HOME    (CODE)
                                    404 ;--------------------------------------------------------
                                    405 ; code
                                    406 ;--------------------------------------------------------
                                    407 	.area CSEG    (CODE)
                                    408 ;------------------------------------------------------------
                                    409 ;Allocation info for local variables in function 'UART_cmd_multiBaudrate'
                                    410 ;------------------------------------------------------------
                                    411 ;a                         Allocated to registers r7 
                                    412 ;------------------------------------------------------------
                                    413 ;	../src/uart.c:26: void UART_cmd_multiBaudrate(Action a)
                                    414 ;	-----------------------------------------
                                    415 ;	 function UART_cmd_multiBaudrate
                                    416 ;	-----------------------------------------
      000000                        417 _UART_cmd_multiBaudrate:
                           000007   418 	ar7 = 0x07
                           000006   419 	ar6 = 0x06
                           000005   420 	ar5 = 0x05
                           000004   421 	ar4 = 0x04
                           000003   422 	ar3 = 0x03
                           000002   423 	ar2 = 0x02
                           000001   424 	ar1 = 0x01
                           000000   425 	ar0 = 0x00
      000000 AF 82            [24]  426 	mov	r7,dpl
                                    427 ;	../src/uart.c:28: CONFB(PCON, BIT_NUM_SMOD, a);
      000002 74 7F            [12]  428 	mov	a,#0x7f
      000004 55 87            [12]  429 	anl	a,_PCON
      000006 FE               [12]  430 	mov	r6,a
      000007 EF               [12]  431 	mov	a,r7
      000008 03               [12]  432 	rr	a
      000009 54 80            [12]  433 	anl	a,#0x80
      00000B 4E               [12]  434 	orl	a,r6
      00000C F5 87            [12]  435 	mov	_PCON,a
                                    436 ;	../src/uart.c:29: }
      00000E 22               [24]  437 	ret
                                    438 ;------------------------------------------------------------
                                    439 ;Allocation info for local variables in function 'UART_cmd_receive'
                                    440 ;------------------------------------------------------------
                                    441 ;a                         Allocated to registers r7 
                                    442 ;------------------------------------------------------------
                                    443 ;	../src/uart.c:41: void UART_cmd_receive(Action a)
                                    444 ;	-----------------------------------------
                                    445 ;	 function UART_cmd_receive
                                    446 ;	-----------------------------------------
      00000F                        447 _UART_cmd_receive:
                                    448 ;	../src/uart.c:43: REN = a;
                                    449 ;	assignBit
      00000F E5 82            [12]  450 	mov	a,dpl
      000011 24 FF            [12]  451 	add	a,#0xff
      000013 92 9C            [24]  452 	mov	_REN,c
                                    453 ;	../src/uart.c:44: }
      000015 22               [24]  454 	ret
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'UART_config'
                                    457 ;------------------------------------------------------------
                                    458 ;uc                        Allocated with name '_UART_config_uc_65536_49'
                                    459 ;tc                        Allocated with name '_UART_config_tc_65536_50'
                                    460 ;tc2                       Allocated with name '_UART_config_tc2_65536_50'
                                    461 ;------------------------------------------------------------
                                    462 ;	../src/uart.c:56: void UART_config(UART_configTypeDef *uc)
                                    463 ;	-----------------------------------------
                                    464 ;	 function UART_config
                                    465 ;	-----------------------------------------
      000016                        466 _UART_config:
      000016 85 82*00         [24]  467 	mov	_UART_config_uc_65536_49,dpl
      000019 85 83*01         [24]  468 	mov	(_UART_config_uc_65536_49 + 1),dph
      00001C 85 F0*02         [24]  469 	mov	(_UART_config_uc_65536_49 + 2),b
                                    470 ;	../src/uart.c:61: UART_INT_cmd(uc->interruptState);
      00001F 74 05            [12]  471 	mov	a,#0x05
      000021 25*00            [12]  472 	add	a,_UART_config_uc_65536_49
      000023 FA               [12]  473 	mov	r2,a
      000024 E4               [12]  474 	clr	a
      000025 35*01            [12]  475 	addc	a,(_UART_config_uc_65536_49 + 1)
      000027 FB               [12]  476 	mov	r3,a
      000028 AC*02            [24]  477 	mov	r4,(_UART_config_uc_65536_49 + 2)
      00002A 8A 82            [24]  478 	mov	dpl,r2
      00002C 8B 83            [24]  479 	mov	dph,r3
      00002E 8C F0            [24]  480 	mov	b,r4
      000030 12r00r00         [24]  481 	lcall	__gptrget
      000033 F5 82            [12]  482 	mov	dpl,a
      000035 12r02rD5         [24]  483 	lcall	_UART_INT_cmd
                                    484 ;	../src/uart.c:62: UART_INT_setPriority(uc->interruptPriority);
      000038 74 06            [12]  485 	mov	a,#0x06
      00003A 25*00            [12]  486 	add	a,_UART_config_uc_65536_49
      00003C FA               [12]  487 	mov	r2,a
      00003D E4               [12]  488 	clr	a
      00003E 35*01            [12]  489 	addc	a,(_UART_config_uc_65536_49 + 1)
      000040 FB               [12]  490 	mov	r3,a
      000041 AC*02            [24]  491 	mov	r4,(_UART_config_uc_65536_49 + 2)
      000043 8A 82            [24]  492 	mov	dpl,r2
      000045 8B 83            [24]  493 	mov	dph,r3
      000047 8C F0            [24]  494 	mov	b,r4
      000049 12r00r00         [24]  495 	lcall	__gptrget
      00004C F5 82            [12]  496 	mov	dpl,a
      00004E 12r02rDC         [24]  497 	lcall	_UART_INT_setPriority
                                    498 ;	../src/uart.c:63: UART_cmd_multiBaudrate(uc->multiBaudrate);
      000051 74 08            [12]  499 	mov	a,#0x08
      000053 25*00            [12]  500 	add	a,_UART_config_uc_65536_49
      000055 FA               [12]  501 	mov	r2,a
      000056 E4               [12]  502 	clr	a
      000057 35*01            [12]  503 	addc	a,(_UART_config_uc_65536_49 + 1)
      000059 FB               [12]  504 	mov	r3,a
      00005A AC*02            [24]  505 	mov	r4,(_UART_config_uc_65536_49 + 2)
      00005C 8A 82            [24]  506 	mov	dpl,r2
      00005E 8B 83            [24]  507 	mov	dph,r3
      000060 8C F0            [24]  508 	mov	b,r4
      000062 12r00r00         [24]  509 	lcall	__gptrget
      000065 F5 82            [12]  510 	mov	dpl,a
      000067 12r00r00         [24]  511 	lcall	_UART_cmd_multiBaudrate
                                    512 ;	../src/uart.c:64: UART_setMode(uc->mode);
      00006A 74 07            [12]  513 	mov	a,#0x07
      00006C 25*00            [12]  514 	add	a,_UART_config_uc_65536_49
      00006E FA               [12]  515 	mov	r2,a
      00006F E4               [12]  516 	clr	a
      000070 35*01            [12]  517 	addc	a,(_UART_config_uc_65536_49 + 1)
      000072 FB               [12]  518 	mov	r3,a
      000073 AC*02            [24]  519 	mov	r4,(_UART_config_uc_65536_49 + 2)
      000075 8A 82            [24]  520 	mov	dpl,r2
      000077 8B 83            [24]  521 	mov	dph,r3
      000079 8C F0            [24]  522 	mov	b,r4
      00007B 12r00r00         [24]  523 	lcall	__gptrget
      00007E F5 82            [12]  524 	mov	dpl,a
      000080 12r02rB0         [24]  525 	lcall	_UART_setMode
                                    526 ;	../src/uart.c:65: UART_cmd_receive(uc->receiveState);
      000083 74 09            [12]  527 	mov	a,#0x09
      000085 25*00            [12]  528 	add	a,_UART_config_uc_65536_49
      000087 FA               [12]  529 	mov	r2,a
      000088 E4               [12]  530 	clr	a
      000089 35*01            [12]  531 	addc	a,(_UART_config_uc_65536_49 + 1)
      00008B FB               [12]  532 	mov	r3,a
      00008C AC*02            [24]  533 	mov	r4,(_UART_config_uc_65536_49 + 2)
      00008E 8A 82            [24]  534 	mov	dpl,r2
      000090 8B 83            [24]  535 	mov	dph,r3
      000092 8C F0            [24]  536 	mov	b,r4
      000094 12r00r00         [24]  537 	lcall	__gptrget
      000097 F5 82            [12]  538 	mov	dpl,a
      000099 12r00r0F         [24]  539 	lcall	_UART_cmd_receive
                                    540 ;	../src/uart.c:66: UART_switchTim(uc->baudGenerator);
      00009C 74 04            [12]  541 	mov	a,#0x04
      00009E 25*00            [12]  542 	add	a,_UART_config_uc_65536_49
      0000A0 FA               [12]  543 	mov	r2,a
      0000A1 E4               [12]  544 	clr	a
      0000A2 35*01            [12]  545 	addc	a,(_UART_config_uc_65536_49 + 1)
      0000A4 FB               [12]  546 	mov	r3,a
      0000A5 AC*02            [24]  547 	mov	r4,(_UART_config_uc_65536_49 + 2)
      0000A7 8A 82            [24]  548 	mov	dpl,r2
      0000A9 8B 83            [24]  549 	mov	dph,r3
      0000AB 8C F0            [24]  550 	mov	b,r4
      0000AD 12r00r00         [24]  551 	lcall	__gptrget
      0000B0 F5 82            [12]  552 	mov	dpl,a
      0000B2 C0 04            [24]  553 	push	ar4
      0000B4 C0 03            [24]  554 	push	ar3
      0000B6 C0 02            [24]  555 	push	ar2
      0000B8 12r02rC0         [24]  556 	lcall	_UART_switchTim
      0000BB D0 02            [24]  557 	pop	ar2
      0000BD D0 03            [24]  558 	pop	ar3
      0000BF D0 04            [24]  559 	pop	ar4
                                    560 ;	../src/uart.c:68: switch (uc->baudGenerator)
      0000C1 8A 82            [24]  561 	mov	dpl,r2
      0000C3 8B 83            [24]  562 	mov	dph,r3
      0000C5 8C F0            [24]  563 	mov	b,r4
      0000C7 12r00r00         [24]  564 	lcall	__gptrget
      0000CA FF               [12]  565 	mov	r7,a
      0000CB BF 01 02         [24]  566 	cjne	r7,#0x01,00115$
      0000CE 80 06            [24]  567 	sjmp	00101$
      0000D0                        568 00115$:
      0000D0 BF 02 02         [24]  569 	cjne	r7,#0x02,00116$
      0000D3 80 61            [24]  570 	sjmp	00102$
      0000D5                        571 00116$:
      0000D5 22               [24]  572 	ret
                                    573 ;	../src/uart.c:70: case PERIPH_TIM_1:
      0000D6                        574 00101$:
                                    575 ;	../src/uart.c:72: tc.function          = TIM_function_tim;
      0000D6 75*03 00         [24]  576 	mov	_UART_config_tc_65536_50,#0x00
                                    577 ;	../src/uart.c:73: tc.interruptState    = DISABLE;
      0000D9 75*04 00         [24]  578 	mov	(_UART_config_tc_65536_50 + 0x0001),#0x00
                                    579 ;	../src/uart.c:74: tc.interruptPriority = DISABLE;
      0000DC 75*05 00         [24]  580 	mov	(_UART_config_tc_65536_50 + 0x0002),#0x00
                                    581 ;	../src/uart.c:75: tc.mode              = TIM_mode_2;
      0000DF 75*06 02         [24]  582 	mov	(_UART_config_tc_65536_50 + 0x0003),#0x02
                                    583 ;	../src/uart.c:76: tc.value             = UART_getBaudGeneratorInitValue(uc->baudrate, PERIPH_TIM_1);
      0000E2 85*00 82         [24]  584 	mov	dpl,_UART_config_uc_65536_49
      0000E5 85*01 83         [24]  585 	mov	dph,(_UART_config_uc_65536_49 + 1)
      0000E8 85*02 F0         [24]  586 	mov	b,(_UART_config_uc_65536_49 + 2)
      0000EB 12r00r00         [24]  587 	lcall	__gptrget
      0000EE FC               [12]  588 	mov	r4,a
      0000EF A3               [24]  589 	inc	dptr
      0000F0 12r00r00         [24]  590 	lcall	__gptrget
      0000F3 FD               [12]  591 	mov	r5,a
      0000F4 A3               [24]  592 	inc	dptr
      0000F5 12r00r00         [24]  593 	lcall	__gptrget
      0000F8 FE               [12]  594 	mov	r6,a
      0000F9 A3               [24]  595 	inc	dptr
      0000FA 12r00r00         [24]  596 	lcall	__gptrget
      0000FD FF               [12]  597 	mov	r7,a
      0000FE 75*11 01         [24]  598 	mov	_UART_getBaudGeneratorInitValue_PARM_2,#0x01
      000101 8C 82            [24]  599 	mov	dpl,r4
      000103 8D 83            [24]  600 	mov	dph,r5
      000105 8E F0            [24]  601 	mov	b,r6
      000107 EF               [12]  602 	mov	a,r7
      000108 12r01r92         [24]  603 	lcall	_UART_getBaudGeneratorInitValue
      00010B E5 82            [12]  604 	mov	a,dpl
      00010D 85 83 F0         [24]  605 	mov	b,dph
      000110 F5*07            [12]  606 	mov	((_UART_config_tc_65536_50 + 0x0004) + 0),a
      000112 85 F0*08         [24]  607 	mov	((_UART_config_tc_65536_50 + 0x0004) + 1),b
                                    608 ;	../src/uart.c:77: TIM2_BAUD_cmd(TIM2_baudClock_receive | TIM2_baudClock_transmit, DISABLE);
      000115 75*00 00         [24]  609 	mov	_TIM2_BAUD_cmd_PARM_2,#0x00
      000118 75 82 03         [24]  610 	mov	dpl,#0x03
      00011B 12r00r00         [24]  611 	lcall	_TIM2_BAUD_cmd
                                    612 ;	../src/uart.c:78: TIM_config(PERIPH_TIM_1, &tc);
      00011E 75*00r03         [24]  613 	mov	_TIM_config_PARM_2,#_UART_config_tc_65536_50
      000121 75*01 00         [24]  614 	mov	(_TIM_config_PARM_2 + 1),#0x00
      000124 75*02 40         [24]  615 	mov	(_TIM_config_PARM_2 + 2),#0x40
      000127 75 82 01         [24]  616 	mov	dpl,#0x01
      00012A 12r00r00         [24]  617 	lcall	_TIM_config
                                    618 ;	../src/uart.c:79: TIM_cmd(PERIPH_TIM_1, ENABLE); 
      00012D 75*00 01         [24]  619 	mov	_TIM_cmd_PARM_2,#0x01
      000130 75 82 01         [24]  620 	mov	dpl,#0x01
                                    621 ;	../src/uart.c:80: } break; 
                                    622 ;	../src/uart.c:81: case PERIPH_TIM_2:
      000133 02r00r00         [24]  623 	ljmp	_TIM_cmd
      000136                        624 00102$:
                                    625 ;	../src/uart.c:83: tc2.function          = TIM2_function_tim;
      000136 75*09 00         [24]  626 	mov	_UART_config_tc2_65536_50,#0x00
                                    627 ;	../src/uart.c:84: tc2.interruptState    = DISABLE;
      000139 75*0A 00         [24]  628 	mov	(_UART_config_tc2_65536_50 + 0x0001),#0x00
                                    629 ;	../src/uart.c:85: tc2.interruptPriority = DISABLE;
      00013C 75*0B 00         [24]  630 	mov	(_UART_config_tc2_65536_50 + 0x0002),#0x00
                                    631 ;	../src/uart.c:86: tc2.mode              = TIM2_mode_2;
      00013F 75*0C 30         [24]  632 	mov	(_UART_config_tc2_65536_50 + 0x0003),#0x30
                                    633 ;	../src/uart.c:87: tc2.value             = 0x00;
      000142 E4               [12]  634 	clr	a
      000143 F5*0D            [12]  635 	mov	((_UART_config_tc2_65536_50 + 0x0004) + 0),a
      000145 F5*0E            [12]  636 	mov	((_UART_config_tc2_65536_50 + 0x0004) + 1),a
                                    637 ;	../src/uart.c:88: tc2.reloadValue       = UART_getBaudGeneratorInitValue(uc->baudrate, PERIPH_TIM_2);
      000147 85*00 82         [24]  638 	mov	dpl,_UART_config_uc_65536_49
      00014A 85*01 83         [24]  639 	mov	dph,(_UART_config_uc_65536_49 + 1)
      00014D 85*02 F0         [24]  640 	mov	b,(_UART_config_uc_65536_49 + 2)
      000150 12r00r00         [24]  641 	lcall	__gptrget
      000153 FC               [12]  642 	mov	r4,a
      000154 A3               [24]  643 	inc	dptr
      000155 12r00r00         [24]  644 	lcall	__gptrget
      000158 FD               [12]  645 	mov	r5,a
      000159 A3               [24]  646 	inc	dptr
      00015A 12r00r00         [24]  647 	lcall	__gptrget
      00015D FE               [12]  648 	mov	r6,a
      00015E A3               [24]  649 	inc	dptr
      00015F 12r00r00         [24]  650 	lcall	__gptrget
      000162 FF               [12]  651 	mov	r7,a
      000163 75*11 02         [24]  652 	mov	_UART_getBaudGeneratorInitValue_PARM_2,#0x02
      000166 8C 82            [24]  653 	mov	dpl,r4
      000168 8D 83            [24]  654 	mov	dph,r5
      00016A 8E F0            [24]  655 	mov	b,r6
      00016C EF               [12]  656 	mov	a,r7
      00016D 12r01r92         [24]  657 	lcall	_UART_getBaudGeneratorInitValue
      000170 E5 82            [12]  658 	mov	a,dpl
      000172 85 83 F0         [24]  659 	mov	b,dph
      000175 F5*0F            [12]  660 	mov	((_UART_config_tc2_65536_50 + 0x0006) + 0),a
      000177 85 F0*10         [24]  661 	mov	((_UART_config_tc2_65536_50 + 0x0006) + 1),b
                                    662 ;	../src/uart.c:89: TIM2_BAUD_cmd(TIM2_baudClock_receive | TIM2_baudClock_transmit, ENABLE);
      00017A 75*00 01         [24]  663 	mov	_TIM2_BAUD_cmd_PARM_2,#0x01
      00017D 75 82 03         [24]  664 	mov	dpl,#0x03
      000180 12r00r00         [24]  665 	lcall	_TIM2_BAUD_cmd
                                    666 ;	../src/uart.c:90: TIM2_config(&tc2);
      000183 90r00r09         [24]  667 	mov	dptr,#_UART_config_tc2_65536_50
      000186 75 F0 40         [24]  668 	mov	b,#0x40
      000189 12r00r00         [24]  669 	lcall	_TIM2_config
                                    670 ;	../src/uart.c:91: TIM2_cmd(ENABLE);
      00018C 75 82 01         [24]  671 	mov	dpl,#0x01
                                    672 ;	../src/uart.c:94: }
                                    673 ;	../src/uart.c:95: }
      00018F 02r00r00         [24]  674 	ljmp	_TIM2_cmd
                                    675 ;------------------------------------------------------------
                                    676 ;Allocation info for local variables in function 'UART_getBaudGeneratorInitValue'
                                    677 ;------------------------------------------------------------
                                    678 ;tim                       Allocated with name '_UART_getBaudGeneratorInitValue_PARM_2'
                                    679 ;baud                      Allocated to registers r4 r5 r6 r7 
                                    680 ;tmp                       Allocated to registers r3 
                                    681 ;sloc0                     Allocated with name '_UART_getBaudGeneratorInitValue_sloc0_1_0'
                                    682 ;------------------------------------------------------------
                                    683 ;	../src/uart.c:109: uint16_t UART_getBaudGeneratorInitValue(uint32_t baud, PERIPH_TIM tim)
                                    684 ;	-----------------------------------------
                                    685 ;	 function UART_getBaudGeneratorInitValue
                                    686 ;	-----------------------------------------
      000192                        687 _UART_getBaudGeneratorInitValue:
      000192 AC 82            [24]  688 	mov	r4,dpl
      000194 AD 83            [24]  689 	mov	r5,dph
      000196 AE F0            [24]  690 	mov	r6,b
      000198 FF               [12]  691 	mov	r7,a
                                    692 ;	../src/uart.c:111: uint8_t tmp = 0x00;
      000199 7B 00            [12]  693 	mov	r3,#0x00
                                    694 ;	../src/uart.c:114: switch (tim)
      00019B 74 01            [12]  695 	mov	a,#0x01
      00019D B5*11 02         [24]  696 	cjne	a,_UART_getBaudGeneratorInitValue_PARM_2,00136$
      0001A0 80 0B            [24]  697 	sjmp	00101$
      0001A2                        698 00136$:
      0001A2 74 02            [12]  699 	mov	a,#0x02
      0001A4 B5*11 03         [24]  700 	cjne	a,_UART_getBaudGeneratorInitValue_PARM_2,00137$
      0001A7 02r02r1C         [24]  701 	ljmp	00111$
      0001AA                        702 00137$:
      0001AA 02r02r3C         [24]  703 	ljmp	00113$
                                    704 ;	../src/uart.c:116: case PERIPH_TIM_1:
      0001AD                        705 00101$:
                                    706 ;	../src/uart.c:118: if (GET_BIT(PCON, SMOD))     /* multi baud rate mode */
      0001AD E5 87            [12]  707 	mov	a,_PCON
      0001AF 30 E7 35         [24]  708 	jnb	acc.7,00109$
                                    709 ;	../src/uart.c:120: if (baud > MCU_FRE_CLK/MCU_PRESCALER/16)
      0001B2 C3               [12]  710 	clr	c
      0001B3 74 24            [12]  711 	mov	a,#0x24
      0001B5 9C               [12]  712 	subb	a,r4
      0001B6 74 F4            [12]  713 	mov	a,#0xf4
      0001B8 9D               [12]  714 	subb	a,r5
      0001B9 E4               [12]  715 	clr	a
      0001BA 9E               [12]  716 	subb	a,r6
      0001BB E4               [12]  717 	clr	a
      0001BC 9F               [12]  718 	subb	a,r7
      0001BD 50 04            [24]  719 	jnc	00103$
                                    720 ;	../src/uart.c:122: return 0x0000;     /* baud rate over max value */
      0001BF 90 00 00         [24]  721 	mov	dptr,#0x0000
      0001C2 22               [24]  722 	ret
      0001C3                        723 00103$:
                                    724 ;	../src/uart.c:126: tmp = (256 - MCU_FRE_CLK/16/MCU_PRESCALER/baud);  
      0001C3 8C*00            [24]  725 	mov	__divulong_PARM_2,r4
      0001C5 8D*01            [24]  726 	mov	(__divulong_PARM_2 + 1),r5
      0001C7 8E*02            [24]  727 	mov	(__divulong_PARM_2 + 2),r6
      0001C9 8F*03            [24]  728 	mov	(__divulong_PARM_2 + 3),r7
      0001CB 90 F4 24         [24]  729 	mov	dptr,#0xf424
      0001CE E4               [12]  730 	clr	a
      0001CF F5 F0            [12]  731 	mov	b,a
      0001D1 12r00r00         [24]  732 	lcall	__divulong
      0001D4 85 82*12         [24]  733 	mov	_UART_getBaudGeneratorInitValue_sloc0_1_0,dpl
      0001D7 85 83*13         [24]  734 	mov	(_UART_getBaudGeneratorInitValue_sloc0_1_0 + 1),dph
      0001DA 85 F0*14         [24]  735 	mov	(_UART_getBaudGeneratorInitValue_sloc0_1_0 + 2),b
      0001DD F5*15            [12]  736 	mov	(_UART_getBaudGeneratorInitValue_sloc0_1_0 + 3),a
      0001DF AA*12            [24]  737 	mov	r2,_UART_getBaudGeneratorInitValue_sloc0_1_0
      0001E1 C3               [12]  738 	clr	c
      0001E2 E4               [12]  739 	clr	a
      0001E3 9A               [12]  740 	subb	a,r2
      0001E4 FB               [12]  741 	mov	r3,a
      0001E5 80 55            [24]  742 	sjmp	00113$
      0001E7                        743 00109$:
                                    744 ;	../src/uart.c:131: if (baud > MCU_FRE_CLK/MCU_PRESCALER/32)
      0001E7 C3               [12]  745 	clr	c
      0001E8 74 12            [12]  746 	mov	a,#0x12
      0001EA 9C               [12]  747 	subb	a,r4
      0001EB 74 7A            [12]  748 	mov	a,#0x7a
      0001ED 9D               [12]  749 	subb	a,r5
      0001EE E4               [12]  750 	clr	a
      0001EF 9E               [12]  751 	subb	a,r6
      0001F0 E4               [12]  752 	clr	a
      0001F1 9F               [12]  753 	subb	a,r7
      0001F2 50 04            [24]  754 	jnc	00106$
                                    755 ;	../src/uart.c:133: return 0x0000;
      0001F4 90 00 00         [24]  756 	mov	dptr,#0x0000
      0001F7 22               [24]  757 	ret
      0001F8                        758 00106$:
                                    759 ;	../src/uart.c:137: tmp = (256 - MCU_FRE_CLK/32/MCU_PRESCALER/baud);
      0001F8 8C*00            [24]  760 	mov	__divulong_PARM_2,r4
      0001FA 8D*01            [24]  761 	mov	(__divulong_PARM_2 + 1),r5
      0001FC 8E*02            [24]  762 	mov	(__divulong_PARM_2 + 2),r6
      0001FE 8F*03            [24]  763 	mov	(__divulong_PARM_2 + 3),r7
      000200 90 7A 12         [24]  764 	mov	dptr,#0x7a12
      000203 E4               [12]  765 	clr	a
      000204 F5 F0            [12]  766 	mov	b,a
      000206 12r00r00         [24]  767 	lcall	__divulong
      000209 85 82*12         [24]  768 	mov	_UART_getBaudGeneratorInitValue_sloc0_1_0,dpl
      00020C 85 83*13         [24]  769 	mov	(_UART_getBaudGeneratorInitValue_sloc0_1_0 + 1),dph
      00020F 85 F0*14         [24]  770 	mov	(_UART_getBaudGeneratorInitValue_sloc0_1_0 + 2),b
      000212 F5*15            [12]  771 	mov	(_UART_getBaudGeneratorInitValue_sloc0_1_0 + 3),a
      000214 AA*12            [24]  772 	mov	r2,_UART_getBaudGeneratorInitValue_sloc0_1_0
      000216 C3               [12]  773 	clr	c
      000217 E4               [12]  774 	clr	a
      000218 9A               [12]  775 	subb	a,r2
      000219 FB               [12]  776 	mov	r3,a
                                    777 ;	../src/uart.c:140: } break;
                                    778 ;	../src/uart.c:141: case PERIPH_TIM_2:
      00021A 80 20            [24]  779 	sjmp	00113$
      00021C                        780 00111$:
                                    781 ;	../src/uart.c:146: return ((65536 - (MCU_FRE_CLK/32/baud)));
      00021C 8C*00            [24]  782 	mov	__divulong_PARM_2,r4
      00021E 8D*01            [24]  783 	mov	(__divulong_PARM_2 + 1),r5
      000220 8E*02            [24]  784 	mov	(__divulong_PARM_2 + 2),r6
      000222 8F*03            [24]  785 	mov	(__divulong_PARM_2 + 3),r7
      000224 90 B8 D8         [24]  786 	mov	dptr,#0xb8d8
      000227 75 F0 05         [24]  787 	mov	b,#0x05
      00022A E4               [12]  788 	clr	a
      00022B 12r00r00         [24]  789 	lcall	__divulong
      00022E AC 82            [24]  790 	mov	r4,dpl
      000230 AD 83            [24]  791 	mov	r5,dph
      000232 C3               [12]  792 	clr	c
      000233 E4               [12]  793 	clr	a
      000234 9C               [12]  794 	subb	a,r4
      000235 F5 82            [12]  795 	mov	dpl,a
      000237 E4               [12]  796 	clr	a
      000238 9D               [12]  797 	subb	a,r5
      000239 F5 83            [12]  798 	mov	dph,a
                                    799 ;	../src/uart.c:152: }
      00023B 22               [24]  800 	ret
      00023C                        801 00113$:
                                    802 ;	../src/uart.c:154: return (tmp << 0x8) | tmp;
      00023C 7F 00            [12]  803 	mov	r7,#0x00
      00023E 8B 06            [24]  804 	mov	ar6,r3
      000240 E4               [12]  805 	clr	a
      000241 42 03            [12]  806 	orl	ar3,a
      000243 EE               [12]  807 	mov	a,r6
      000244 42 07            [12]  808 	orl	ar7,a
      000246 8B 82            [24]  809 	mov	dpl,r3
      000248 8F 83            [24]  810 	mov	dph,r7
                                    811 ;	../src/uart.c:155: }
      00024A 22               [24]  812 	ret
                                    813 ;------------------------------------------------------------
                                    814 ;Allocation info for local variables in function 'UART_getByte'
                                    815 ;------------------------------------------------------------
                                    816 ;	../src/uart.c:167: byte UART_getByte(void)
                                    817 ;	-----------------------------------------
                                    818 ;	 function UART_getByte
                                    819 ;	-----------------------------------------
      00024B                        820 _UART_getByte:
                                    821 ;	../src/uart.c:169: return SBUF;
      00024B 85 99 82         [24]  822 	mov	dpl,_SBUF
                                    823 ;	../src/uart.c:170: }
      00024E 22               [24]  824 	ret
                                    825 ;------------------------------------------------------------
                                    826 ;Allocation info for local variables in function 'UART_isReceived'
                                    827 ;------------------------------------------------------------
                                    828 ;	../src/uart.c:182: FunctionalState UART_isReceived(void)
                                    829 ;	-----------------------------------------
                                    830 ;	 function UART_isReceived
                                    831 ;	-----------------------------------------
      00024F                        832 _UART_isReceived:
                                    833 ;	../src/uart.c:184: return (FunctionalState)RI;
      00024F A2 98            [12]  834 	mov	c,_RI
      000251 E4               [12]  835 	clr	a
      000252 33               [12]  836 	rlc	a
      000253 F5 82            [12]  837 	mov	dpl,a
                                    838 ;	../src/uart.c:185: }
      000255 22               [24]  839 	ret
                                    840 ;------------------------------------------------------------
                                    841 ;Allocation info for local variables in function 'UART_isTransmitted'
                                    842 ;------------------------------------------------------------
                                    843 ;	../src/uart.c:197: FunctionalState UART_isTransmitted(void)
                                    844 ;	-----------------------------------------
                                    845 ;	 function UART_isTransmitted
                                    846 ;	-----------------------------------------
      000256                        847 _UART_isTransmitted:
                                    848 ;	../src/uart.c:199: return (FunctionalState)TI;
      000256 A2 99            [12]  849 	mov	c,_TI
      000258 E4               [12]  850 	clr	a
      000259 33               [12]  851 	rlc	a
      00025A F5 82            [12]  852 	mov	dpl,a
                                    853 ;	../src/uart.c:200: }
      00025C 22               [24]  854 	ret
                                    855 ;------------------------------------------------------------
                                    856 ;Allocation info for local variables in function 'UART_sendByte'
                                    857 ;------------------------------------------------------------
                                    858 ;dat                       Allocated to registers 
                                    859 ;------------------------------------------------------------
                                    860 ;	../src/uart.c:212: void UART_sendByte(byte dat)
                                    861 ;	-----------------------------------------
                                    862 ;	 function UART_sendByte
                                    863 ;	-----------------------------------------
      00025D                        864 _UART_sendByte:
      00025D 85 82 99         [24]  865 	mov	_SBUF,dpl
                                    866 ;	../src/uart.c:215: while (!TI);
      000260                        867 00101$:
                                    868 ;	../src/uart.c:216: TI = RESET;
                                    869 ;	assignBit
      000260 10 99 02         [24]  870 	jbc	_TI,00114$
      000263 80 FB            [24]  871 	sjmp	00101$
      000265                        872 00114$:
                                    873 ;	../src/uart.c:217: }
      000265 22               [24]  874 	ret
                                    875 ;------------------------------------------------------------
                                    876 ;Allocation info for local variables in function 'UART_sendHex'
                                    877 ;------------------------------------------------------------
                                    878 ;hex                       Allocated to registers r7 
                                    879 ;------------------------------------------------------------
                                    880 ;	../src/uart.c:229: void UART_sendHex(uint8_t hex)
                                    881 ;	-----------------------------------------
                                    882 ;	 function UART_sendHex
                                    883 ;	-----------------------------------------
      000266                        884 _UART_sendHex:
                                    885 ;	../src/uart.c:231: UART_sendByte(hexTable[hex >> 0x4]);
      000266 E5 82            [12]  886 	mov	a,dpl
      000268 FF               [12]  887 	mov	r7,a
      000269 C4               [12]  888 	swap	a
      00026A 54 0F            [12]  889 	anl	a,#0x0f
      00026C 90r00r00         [24]  890 	mov	dptr,#_hexTable
      00026F 93               [24]  891 	movc	a,@a+dptr
      000270 F5 82            [12]  892 	mov	dpl,a
      000272 C0 07            [24]  893 	push	ar7
      000274 12r02r5D         [24]  894 	lcall	_UART_sendByte
      000277 D0 07            [24]  895 	pop	ar7
                                    896 ;	../src/uart.c:232: UART_sendByte(hexTable[hex & 0xF]);
      000279 53 07 0F         [24]  897 	anl	ar7,#0x0f
      00027C 7E 00            [12]  898 	mov	r6,#0x00
      00027E EF               [12]  899 	mov	a,r7
      00027F 24r00            [12]  900 	add	a,#_hexTable
      000281 F5 82            [12]  901 	mov	dpl,a
      000283 EE               [12]  902 	mov	a,r6
      000284 34s00            [12]  903 	addc	a,#(_hexTable >> 8)
      000286 F5 83            [12]  904 	mov	dph,a
      000288 E4               [12]  905 	clr	a
      000289 93               [24]  906 	movc	a,@a+dptr
      00028A F5 82            [12]  907 	mov	dpl,a
                                    908 ;	../src/uart.c:233: }
      00028C 02r02r5D         [24]  909 	ljmp	_UART_sendByte
                                    910 ;------------------------------------------------------------
                                    911 ;Allocation info for local variables in function 'UART_sendString'
                                    912 ;------------------------------------------------------------
                                    913 ;str                       Allocated to registers 
                                    914 ;------------------------------------------------------------
                                    915 ;	../src/uart.c:245: void UART_sendString(char *str)
                                    916 ;	-----------------------------------------
                                    917 ;	 function UART_sendString
                                    918 ;	-----------------------------------------
      00028F                        919 _UART_sendString:
      00028F AD 82            [24]  920 	mov	r5,dpl
      000291 AE 83            [24]  921 	mov	r6,dph
      000293 AF F0            [24]  922 	mov	r7,b
                                    923 ;	../src/uart.c:247: while (*str != '\0')
      000295                        924 00104$:
      000295 8D 82            [24]  925 	mov	dpl,r5
      000297 8E 83            [24]  926 	mov	dph,r6
      000299 8F F0            [24]  927 	mov	b,r7
      00029B 12r00r00         [24]  928 	lcall	__gptrget
      00029E FC               [12]  929 	mov	r4,a
      00029F 60 0E            [24]  930 	jz	00107$
                                    931 ;	../src/uart.c:249: SBUF = *str;
      0002A1 8C 99            [24]  932 	mov	_SBUF,r4
                                    933 ;	../src/uart.c:250: while (!TI);
      0002A3                        934 00101$:
                                    935 ;	../src/uart.c:251: TI = RESET;          /* reset flag */
                                    936 ;	assignBit
      0002A3 10 99 02         [24]  937 	jbc	_TI,00127$
      0002A6 80 FB            [24]  938 	sjmp	00101$
      0002A8                        939 00127$:
                                    940 ;	../src/uart.c:252: str++;
      0002A8 0D               [12]  941 	inc	r5
      0002A9 BD 00 E9         [24]  942 	cjne	r5,#0x00,00104$
      0002AC 0E               [12]  943 	inc	r6
      0002AD 80 E6            [24]  944 	sjmp	00104$
      0002AF                        945 00107$:
                                    946 ;	../src/uart.c:254: }
      0002AF 22               [24]  947 	ret
                                    948 ;------------------------------------------------------------
                                    949 ;Allocation info for local variables in function 'UART_setMode'
                                    950 ;------------------------------------------------------------
                                    951 ;mode                      Allocated to registers r7 
                                    952 ;------------------------------------------------------------
                                    953 ;	../src/uart.c:266: void UART_setMode(UART_mode mode)
                                    954 ;	-----------------------------------------
                                    955 ;	 function UART_setMode
                                    956 ;	-----------------------------------------
      0002B0                        957 _UART_setMode:
      0002B0 AF 82            [24]  958 	mov	r7,dpl
                                    959 ;	../src/uart.c:268: SCON = (SCON & 0x3F) | ((uint8_t)mode << 0x6);
      0002B2 E5 98            [12]  960 	mov	a,_SCON
      0002B4 54 3F            [12]  961 	anl	a,#0x3f
      0002B6 FE               [12]  962 	mov	r6,a
      0002B7 EF               [12]  963 	mov	a,r7
      0002B8 03               [12]  964 	rr	a
      0002B9 03               [12]  965 	rr	a
      0002BA 54 C0            [12]  966 	anl	a,#0xc0
      0002BC 4E               [12]  967 	orl	a,r6
      0002BD F5 98            [12]  968 	mov	_SCON,a
                                    969 ;	../src/uart.c:269: }
      0002BF 22               [24]  970 	ret
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'UART_switchTim'
                                    973 ;------------------------------------------------------------
                                    974 ;tim                       Allocated to registers r7 
                                    975 ;------------------------------------------------------------
                                    976 ;	../src/uart.c:281: void UART_switchTim(PERIPH_TIM tim)
                                    977 ;	-----------------------------------------
                                    978 ;	 function UART_switchTim
                                    979 ;	-----------------------------------------
      0002C0                        980 _UART_switchTim:
      0002C0 AF 82            [24]  981 	mov	r7,dpl
                                    982 ;	../src/uart.c:283: if (tim == PERIPH_TIM_1)
      0002C2 BF 01 04         [24]  983 	cjne	r7,#0x01,00104$
                                    984 ;	../src/uart.c:285: T2CON = T2CON & 0xCF;
      0002C5 53 C8 CF         [24]  985 	anl	_T2CON,#0xcf
      0002C8 22               [24]  986 	ret
      0002C9                        987 00104$:
                                    988 ;	../src/uart.c:287: else if (tim == PERIPH_TIM_2)
      0002C9 BF 02 08         [24]  989 	cjne	r7,#0x02,00106$
                                    990 ;	../src/uart.c:289: T2CON = (T2CON & 0xCF) | 0x30;
      0002CC E5 C8            [12]  991 	mov	a,_T2CON
      0002CE 54 CF            [12]  992 	anl	a,#0xcf
      0002D0 44 30            [12]  993 	orl	a,#0x30
      0002D2 F5 C8            [12]  994 	mov	_T2CON,a
      0002D4                        995 00106$:
                                    996 ;	../src/uart.c:291: }
      0002D4 22               [24]  997 	ret
                                    998 ;------------------------------------------------------------
                                    999 ;Allocation info for local variables in function 'UART_INT_cmd'
                                   1000 ;------------------------------------------------------------
                                   1001 ;a                         Allocated to registers r7 
                                   1002 ;------------------------------------------------------------
                                   1003 ;	../src/uart.c:303: void UART_INT_cmd(Action a)
                                   1004 ;	-----------------------------------------
                                   1005 ;	 function UART_INT_cmd
                                   1006 ;	-----------------------------------------
      0002D5                       1007 _UART_INT_cmd:
                                   1008 ;	../src/uart.c:305: ES = a;
                                   1009 ;	assignBit
      0002D5 E5 82            [12] 1010 	mov	a,dpl
      0002D7 24 FF            [12] 1011 	add	a,#0xff
      0002D9 92 AC            [24] 1012 	mov	_ES,c
                                   1013 ;	../src/uart.c:306: }
      0002DB 22               [24] 1014 	ret
                                   1015 ;------------------------------------------------------------
                                   1016 ;Allocation info for local variables in function 'UART_INT_setPriority'
                                   1017 ;------------------------------------------------------------
                                   1018 ;p                         Allocated to registers r7 
                                   1019 ;------------------------------------------------------------
                                   1020 ;	../src/uart.c:318: void UART_INT_setPriority(UTIL_interruptPriority p)
                                   1021 ;	-----------------------------------------
                                   1022 ;	 function UART_INT_setPriority
                                   1023 ;	-----------------------------------------
      0002DC                       1024 _UART_INT_setPriority:
                                   1025 ;	../src/uart.c:320: PS = TESTB(p, 0);
      0002DC E5 82            [12] 1026 	mov	a,dpl
      0002DE FF               [12] 1027 	mov	r7,a
      0002DF 54 01            [12] 1028 	anl	a,#0x01
      0002E1 B4 01 00         [24] 1029 	cjne	a,#0x01,00103$
      0002E4                       1030 00103$:
      0002E4 B3               [12] 1031 	cpl	c
      0002E5 E4               [12] 1032 	clr	a
      0002E6 33               [12] 1033 	rlc	a
      0002E7 24 FF            [12] 1034 	add	a,#0xff
      0002E9 92 BC            [24] 1035 	mov	_PS,c
                                   1036 ;	../src/uart.c:321: CONFB(IPH, BIT_NUM_PSH, TESTB(p, 1));
      0002EB 74 EF            [12] 1037 	mov	a,#0xef
      0002ED 55 B7            [12] 1038 	anl	a,_IPH
      0002EF FE               [12] 1039 	mov	r6,a
      0002F0 EF               [12] 1040 	mov	a,r7
      0002F1 03               [12] 1041 	rr	a
      0002F2 54 01            [12] 1042 	anl	a,#0x01
      0002F4 B4 01 00         [24] 1043 	cjne	a,#0x01,00105$
      0002F7                       1044 00105$:
      0002F7 B3               [12] 1045 	cpl	c
      0002F8 E4               [12] 1046 	clr	a
      0002F9 33               [12] 1047 	rlc	a
      0002FA C4               [12] 1048 	swap	a
      0002FB 54 F0            [12] 1049 	anl	a,#0xf0
      0002FD 4E               [12] 1050 	orl	a,r6
      0002FE F5 B7            [12] 1051 	mov	_IPH,a
                                   1052 ;	../src/uart.c:322: }
      000300 22               [24] 1053 	ret
                                   1054 	.area CSEG    (CODE)
                                   1055 	.area CONST   (CODE)
      000000                       1056 _hexTable:
      000000 30                    1057 	.db #0x30	;  48	'0'
      000001 31                    1058 	.db #0x31	;  49	'1'
      000002 32                    1059 	.db #0x32	;  50	'2'
      000003 33                    1060 	.db #0x33	;  51	'3'
      000004 34                    1061 	.db #0x34	;  52	'4'
      000005 35                    1062 	.db #0x35	;  53	'5'
      000006 36                    1063 	.db #0x36	;  54	'6'
      000007 37                    1064 	.db #0x37	;  55	'7'
      000008 38                    1065 	.db #0x38	;  56	'8'
      000009 39                    1066 	.db #0x39	;  57	'9'
      00000A 41                    1067 	.db #0x41	;  65	'A'
      00000B 42                    1068 	.db #0x42	;  66	'B'
      00000C 43                    1069 	.db #0x43	;  67	'C'
      00000D 44                    1070 	.db #0x44	;  68	'D'
      00000E 45                    1071 	.db #0x45	;  69	'E'
      00000F 46                    1072 	.db #0x46	;  70	'F'
                                   1073 	.area XINIT   (CODE)
                                   1074 	.area CABS    (ABS,CODE)
